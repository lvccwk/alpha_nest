// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id                        Int                    @id @default(autoincrement())
  user_type                 String                 @db.VarChar(255)
  username                  String?                @db.VarChar(255)
  email                     String                 @unique @db.VarChar(255)
  password                  String
  image                     String?
  created_at                DateTime               @default(now())
  updated_at                DateTime               @updatedAt
  is_deleted                Boolean                @default(false)
  purchase_history          PurchaseHistorys[]
  cart                      Carts[]
  teacher                   Teachers[]
  timetable                 Timetables[]
  product_rating            ProductRatings[]
  chatroom                  Chatrooms[]
  chatroom_history          ChatroomHistorys[]
  chatroom_participant      ChatroomParticipants[]
  private_message_from_user PrivateMessages[]      @relation("from_user")
  private_message_to_user   PrivateMessages[]      @relation("to_user")
  followed_teachers         FollowedTeachers[]
  request                   Requests[]
}

model Subjects {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  chinese_name    String            @db.VarChar(255)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  product         Products[]
  timetable       Timetables[]
  teacher_subject TeacherSubjects[]
}

model Teachers {
  id                Int                @id @default(autoincrement())
  user              Users?             @relation(fields: [user_id], references: [id])
  user_id           Int?               @unique
  info              String             @db.Text
  rating            Int?               @db.Integer
  school            String             @db.Text
  experience        Int?               @db.Integer
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  teacher_subject   TeacherSubjects[]
  followed_teachers FollowedTeachers[]
  product           Products[]
  available_time    AvailableTimes[]
  request           Requests[]
}

model FollowedTeachers {
  id         Int       @id @default(autoincrement())
  user       Users?    @relation(fields: [user_id], references: [id])
  user_id    Int
  teacher    Teachers? @relation(fields: [teacher_id], references: [id])
  teacher_id Int

  @@unique([user_id, teacher_id])
}

model TeacherSubjects {
  id         Int       @id @default(autoincrement())
  teacher    Teachers? @relation(fields: [teacher_id], references: [id])
  teacher_id Int
  subject    Subjects? @relation(fields: [subject_id], references: [id])
  subject_id Int
}

model Products {
  id               Int                @id @default(autoincrement())
  name             String?            @db.VarChar(255)
  price            Int                @db.Integer
  product_type     String             @db.VarChar(255)
  avg_rating       Int?               @db.Integer
  file_url         String             @db.Text
  image            String?            @db.Text
  info             String             @db.Text
  is_onsale        Boolean?           @default(true) @db.Boolean
  subject          Subjects?          @relation(fields: [subject_id], references: [id])
  subject_id       Int?
  teacher          Teachers?          @relation(fields: [teacher_id], references: [id])
  teacher_id       Int?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  product_rating   ProductRatings[]
  purchase_history PurchaseHistorys[]
  cart_detail      CartDetails[]
}

model Carts {
  id          Int           @id @default(autoincrement())
  student     Users?        @relation(fields: [student_id], references: [id])
  student_id  Int?          @unique
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  cart_detail CartDetails[]
}

model CartDetails {
  id         Int       @id @default(autoincrement())
  product    Products? @relation(fields: [product_id], references: [id])
  product_id Int?
  cart       Carts?    @relation(fields: [cart_id], references: [id])
  cart_id    Int?
  is_buying  Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model ProductRatings {
  id         Int       @id @default(autoincrement())
  product    Products? @relation(fields: [product_id], references: [id])
  product_id Int?
  student    Users?    @relation(fields: [student_id], references: [id])
  student_id Int?
  rating     Int       @unique @db.Integer
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model PurchaseHistorys {
  id         Int       @id @default(autoincrement())
  product    Products? @relation(fields: [product_id], references: [id])
  product_id Int?
  student    Users?    @relation(fields: [student_id], references: [id])
  student_id Int?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Timetables {
  id         Int       @id @default(autoincrement())
  time_slot  String    @db.VarChar(255)
  user       Users?    @relation(fields: [user_id], references: [id])
  user_id    Int?
  subject    Subjects? @relation(fields: [subject_id], references: [id])
  subject_id Int?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Chatrooms {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  user                 Users?                 @relation(fields: [user_id], references: [id])
  user_id              Int?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  chatroom_history     ChatroomHistorys[]
  chatroom_participant ChatroomParticipants[]
}

model ChatroomHistorys {
  id          Int        @id @default(autoincrement())
  content     String     @db.VarChar(255)
  chatroom    Chatrooms? @relation(fields: [chatroom_id], references: [id])
  chatroom_id Int?
  user        Users?     @relation(fields: [user_id], references: [id])
  user_id     Int?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model ChatroomParticipants {
  id          Int        @id @default(autoincrement())
  chatroom    Chatrooms? @relation(fields: [chatroom_id], references: [id])
  chatroom_id Int?
  user        Users?     @relation(fields: [user_id], references: [id])
  user_id     Int?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

model PrivateMessages {
  id         Int      @id @default(autoincrement())
  from       Users?   @relation("from_user", fields: [from_id], references: [id])
  from_id    Int?
  to         Users?   @relation("to_user", fields: [to_id], references: [id])
  to_id      Int?
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AvailableTimes {
  id          Int        @id @default(autoincrement())
  time_slot   String     @db.Text
  time_during Int
  teacher     Teachers?  @relation(fields: [teacher_id], references: [id])
  teacher_id  Int?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  reqest      Requests[]
}

model Requests {
  id                Int             @id @default(autoincrement())
  status            String          @db.VarChar()
  user              Users?          @relation(fields: [user_id], references: [id])
  user_id           Int?
  teacher           Teachers?       @relation(fields: [teacher_id], references: [id])
  teacher_id        Int?
  available_time    AvailableTimes? @relation(fields: [available_time_id], references: [id])
  available_time_id Int?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
}
